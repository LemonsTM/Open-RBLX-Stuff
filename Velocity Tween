local TeleportSystem = {}
TeleportSystem.__index = TeleportSystem

local PathfindingService = game:GetService("PathfindingService")

local RAYCAST_OFFSET = 1
local RAYCAST_DISTANCE = 50
local RAYCAST_ANGLES = {0, 45, -45, 90, -90}
local MAX_RETRIES = 3
local HEIGHT_JUMP = 10

function TeleportSystem.new()
	local self = setmetatable({}, TeleportSystem)
	self.queue = {}
	self.isTeleporting = false
	self.currentConnection = nil
	self.onDestinationReached = Instance.new("BindableEvent")
	self.retryCount = 0
	self.lastPosition = Vector3.new()
	return self
end

function TeleportSystem:ComputePath(startPos, endPos)
	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		AgentJumpHeight = 10,
		AgentMaxSlope = 45,
	})

	path:ComputeAsync(startPos, endPos)

	if path.Status == Enum.PathStatus.Success then
		return path
	end

	return nil
end

function TeleportSystem:MoveCharacterAlongPath(character, path, speed)
	local waypoints = path:GetWaypoints()
	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return end

	local currentWaypointIndex = 1

	self.currentConnection = game:GetService("RunService").RenderStepped:Connect(function(dt)
		if currentWaypointIndex > #waypoints then
			self.isTeleporting = false
			self.currentConnection:Disconnect()
			self.currentConnection = nil
			self.onDestinationReached:Fire()
			return
		end

		local waypoint = waypoints[currentWaypointIndex]
		local direction = (waypoint.Position - humanoidRootPart.Position).Unit
		humanoidRootPart.Velocity = direction * speed

		if (humanoidRootPart.Position - waypoint.Position).Magnitude < 1 then
			if waypoint.Action == Enum.PathWaypointAction.Jump then
				character:FindFirstChildOfClass("Humanoid").Jump = true
			end
			currentWaypointIndex = currentWaypointIndex + 1
		end
	end)
end

function TeleportSystem:FindBestPath(currentPosition, targetPosition)
	local direction = (targetPosition - currentPosition).Unit
	local smallestDistanceToTarget = math.huge
	local bestDirection = direction

	for _, angle in ipairs(RAYCAST_ANGLES) do
		local newDirection = CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * direction
		local ray = Ray.new(currentPosition + Vector3.new(0, RAYCAST_OFFSET, 0), newDirection * RAYCAST_DISTANCE)
		local hit, hitPosition = workspace:FindPartOnRay(ray)

		if hit then
			local distanceToTargetFromHit = (targetPosition - hitPosition).Magnitude
			if distanceToTargetFromHit < smallestDistanceToTarget then
				smallestDistanceToTarget = distanceToTargetFromHit
				bestDirection = newDirection
			end
		end
	end

	if bestDirection == direction then
		local verticalRay = Ray.new(currentPosition, Vector3.new(0, HEIGHT_JUMP, 0))
		local hit, _ = workspace:FindPartOnRay(verticalRay)
		if not hit then
			bestDirection = Vector3.new(0, HEIGHT_JUMP, 0).Unit
		end
	end

	return bestDirection
end

function TeleportSystem:FindNearestGroundPoint(position)
	local ray = Ray.new(position, Vector3.new(0, -1000, 0))
	local hit, hitPosition = workspace:FindPartOnRay(ray)
	if hit then
		return hitPosition
	end
	return nil
end

function TeleportSystem:TeleportTo(position, speed)
	table.insert(self.queue, {position, speed})
	if not self.isTeleporting then
		self:ProcessQueue()
	end
end

function TeleportSystem:ProcessQueue()
	if #self.queue == 0 then
		return
	end

	local data = table.remove(self.queue, 1)
	local position, speed = unpack(data)
	self.isTeleporting = true

	local character = game.Players.LocalPlayer.Character
	local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return end

	local path = self:ComputePath(humanoidRootPart.Position, position)
	if path then
		self:MoveCharacterAlongPath(character, path, speed)
	else
		local raycastDirection = self:FindBestPath(humanoidRootPart.Position, position)
		if raycastDirection then
			humanoidRootPart.Velocity = raycastDirection * speed
		else
			local groundPoint = self:FindNearestGroundPoint(position)
			if groundPoint then
				self:TeleportTo(groundPoint, speed)
			else
				self.isTeleporting = false
			end
		end
	end
end

function TeleportSystem:Cancel()
	if self.currentConnection then
		self.currentConnection:Disconnect()
		self.currentConnection = nil
	end
	self.isTeleporting = false
	self.queue = {}
end

return TeleportSystem
