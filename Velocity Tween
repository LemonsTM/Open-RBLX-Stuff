local TeleportSystem = {}
TeleportSystem.__index = TeleportSystem

local RAYCAST_OFFSET = 1
local RAYCAST_DISTANCE = 50
local RAYCAST_ANGLES = {0, 45, -45, 90, -90, 135, -135, 180, -180}
local MAX_RETRIES = 3
local HEIGHT_JUMP = 50
local ACCELERATION_RATE = 5

function TeleportSystem.new()
	local self = setmetatable({}, TeleportSystem)
	self.queue = {}
	self.isTeleporting = false
	self.currentConnection = nil
	self.onDestinationReached = Instance.new("BindableEvent")
	self.retryCount = 0
	self.lastPosition = Vector3.new()
	self.maxHeightAboveGround = 15
	self.targetWaypoint = nil
	self.currentSpeed = 0
	return self
end

function TeleportSystem:ProbeAroundObstacle(position, endPos)
	local bestDirection = nil
	local smallestDistanceToTarget = math.huge

	local tasks = {}
	local completedTasks = 0

	for _, angle in ipairs(RAYCAST_ANGLES) do
		local newTask = task.spawn(function()
			local newDirection = CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * (endPos - position).Unit
			local ray = Ray.new(position, newDirection * RAYCAST_DISTANCE)
			local hit, hitPosition = workspace:FindPartOnRay(ray)

			if not hit then
				local distanceToTargetFromHit = (endPos - hitPosition).Magnitude
				if distanceToTargetFromHit < smallestDistanceToTarget then
					smallestDistanceToTarget = distanceToTargetFromHit
					bestDirection = newDirection
				end
			else
				if newDirection.Y > 0 then
					local overheadRay = Ray.new(hitPosition, Vector3.new(0, HEIGHT_JUMP, 0))
					local overheadHit = workspace:FindPartOnRay(overheadRay)
					if not overheadHit then
						local distanceToTargetFromHit = (endPos - hitPosition).Magnitude
						if distanceToTargetFromHit < smallestDistanceToTarget then
							smallestDistanceToTarget = distanceToTargetFromHit
							bestDirection = newDirection
						end
					end
				end
			end

			completedTasks = completedTasks + 1
		end)
		table.insert(tasks, newTask)
	end

	while completedTasks < #RAYCAST_ANGLES do
		task.wait()
	end

	return bestDirection
end

function TeleportSystem:CalculateDynamicPath(startPos, endPos, stayOnGround)
	local waypoints = {endPos}
	local currentPosition = startPos

	while (currentPosition - endPos).Magnitude > 1 do
		task.wait()
		local direction = (endPos - currentPosition).Unit
		local ray = Ray.new(currentPosition, direction * RAYCAST_DISTANCE)
		local hit, hitPosition = workspace:FindPartOnRay(ray)

		if hit then
			local bestDirection = self:ProbeAroundObstacle(hitPosition, endPos)
			if bestDirection then
				local newWaypoint = hitPosition + bestDirection * 5
				if stayOnGround and bestDirection.Y == 0 then
					newWaypoint = Vector3.new(newWaypoint.X, currentPosition.Y, newWaypoint.Z)
				end

				local groundRay = Ray.new(newWaypoint, Vector3.new(0, -1, 0) * self.maxHeightAboveGround)
				local groundHit, groundPosition = workspace:FindPartOnRay(groundRay)
				if groundHit then
					local heightAboveGround = newWaypoint.Y - groundPosition.Y
					if heightAboveGround > self.maxHeightAboveGround then
						newWaypoint = Vector3.new(newWaypoint.X, groundPosition.Y + self.maxHeightAboveGround, newWaypoint.Z)
					end
				end

				table.insert(waypoints, 1, newWaypoint)
				currentPosition = newWaypoint
			else
				break
			end
		else
			currentPosition = currentPosition + direction * 5
		end
	end

	return waypoints
end

function TeleportSystem:TeleportTo(position, speed, stayOnGround)
	table.insert(self.queue, {position, speed, stayOnGround})
	if not self.isTeleporting then
		self:ProcessQueue()
	end
end

function TeleportSystem:ProcessQueue()
	if #self.queue == 0 then
		return
	end

	table.sort(self.queue, function(a, b)
		return (a[1] - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 
			(b[1] - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
	end)

	local data = table.remove(self.queue, 1)
	local position, speed, stayOnGround = unpack(data)

	if self.isTeleporting then
		self.targetWaypoint = position
		return
	end

	self.isTeleporting = true
	self.targetWaypoint = position

	local character = game.Players.LocalPlayer.Character
	local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return end

	local waypoints = self:CalculateDynamicPath(humanoidRootPart.Position, position, stayOnGround)
	local currentWaypointIndex = 1

	if not self.currentConnection then
		self.currentConnection = game:GetService("RunService").RenderStepped:Connect(function(dt)
			if currentWaypointIndex > #waypoints then
				self.isTeleporting = false
				if self.currentConnection then
					self.currentConnection:Disconnect()
					self.currentConnection = nil
				end
				self.onDestinationReached:Fire()
				self:ProcessQueue()
				return
			end

			local waypoint = waypoints[currentWaypointIndex]
			local direction = (waypoint - humanoidRootPart.Position).Unit

			if self.currentSpeed < speed then
				self.currentSpeed = self.currentSpeed + ACCELERATION_RATE * dt
				if self.currentSpeed > speed then
					self.currentSpeed = speed
				end
			end

			humanoidRootPart.Velocity = direction * self.currentSpeed

			if (humanoidRootPart.Position - waypoint).Magnitude < 1 then
				currentWaypointIndex = currentWaypointIndex + 1
			end
		end)
	end
end

function TeleportSystem:Cancel()
	if self.currentConnection then
		self.currentConnection:Disconnect()
		self.currentConnection = nil
	end
	self.isTeleporting = false
	self.queue = {}
	self:ClearVisualization()
end

return TeleportSystem
