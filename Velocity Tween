local TeleportSystem = {}
TeleportSystem.__index = TeleportSystem

local PathfindingService = game:GetService("PathfindingService")

local RAYCAST_DISTANCE = 50
local MAX_RETRIES = 3
local HEIGHT_JUMP = 10

function TeleportSystem.new()
	local self = setmetatable({}, TeleportSystem)
	self.queue = {}
	self.isTeleporting = false
	self.currentConnection = nil
	self.onDestinationReached = Instance.new("BindableEvent")
	self.retryCount = 0
	self.lastPosition = Vector3.new()
	return self
end

function TeleportSystem:FindBestPath(currentPosition, targetPosition)
	local direction = (targetPosition - currentPosition).Unit
	local ray = Ray.new(currentPosition, direction * RAYCAST_DISTANCE)
	local hit, hitPosition = workspace:FindPartOnRay(ray)

	if not hit then
		return direction
	else
		local bestDirection = nil
		local smallestDistanceToTarget = math.huge
		local recentObstacles = {}

		local angleIncrements = {20, 10, 5}

		for _, angleIncrement in ipairs(angleIncrements) do
			for yaw = 0, 360, angleIncrement do
				for pitch = -90, 90, angleIncrement do
					local newDirection = CFrame.fromEulerAnglesXYZ(math.rad(pitch), math.rad(yaw), 0) * Vector3.new(0, 0, -1)
					local secondaryRay = Ray.new(hitPosition, newDirection * RAYCAST_DISTANCE)
					local secondaryHit, secondaryHitPosition = workspace:FindPartOnRay(secondaryRay)

					if not secondaryHit and not recentObstacles[secondaryHitPosition] then
						local distanceToTargetFromHit = (targetPosition - secondaryHitPosition).Magnitude
						if distanceToTargetFromHit < smallestDistanceToTarget then
							smallestDistanceToTarget = distanceToTargetFromHit
							bestDirection = newDirection
						end
					elseif secondaryHit then
						recentObstacles[secondaryHitPosition] = true
					end
				end
			end

			if bestDirection then
				break
			end
		end

		if not bestDirection then
			local randomOffset = Vector3.new(math.random(-1, 1), math.random(-1, 1), math.random(-1, 1)).Unit
			bestDirection = (direction + randomOffset).Unit
		end

		return bestDirection or direction
	end
end

function TeleportSystem:TeleportTo(position, speed)
	table.insert(self.queue, {position, speed})
	if not self.isTeleporting then
		self:ProcessQueue()
	end
end

function TeleportSystem:ProcessQueue()
	if #self.queue == 0 then
		return
	end

	local data = table.remove(self.queue, 1)
	local position, speed = unpack(data)
	self.isTeleporting = true

	local character = game.Players.LocalPlayer.Character
	local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return end

	self.currentConnection = game:GetService("RunService").RenderStepped:Connect(function(dt)
		local direction = self:FindBestPath(humanoidRootPart.Position, position)
		humanoidRootPart.Velocity = direction * speed
		if (humanoidRootPart.Position - position).Magnitude < 1 then
			self.isTeleporting = false
			self.currentConnection:Disconnect()
			self.currentConnection = nil
			self.onDestinationReached:Fire()
		end
	end)
end

function TeleportSystem:Cancel()
	if self.currentConnection then
		self.currentConnection:Disconnect()
		self.currentConnection = nil
	end
	self.isTeleporting = false
	self.queue = {}
end

return TeleportSystem
